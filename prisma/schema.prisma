
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
      
model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String?
  username         String    @unique
  name             String?
  role             String    @default("user")
  isVerified       Boolean   @default(false)
  verificationToken String?
  otp              String?
  otpExpiry        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  semenReports     SemenReport[]
  habits           Habit[]
  notifications    Notification[]
  bookmarks        Bookmark[]
  forumPosts       ForumPost[]
  forumReplies     ForumReply[]
  recommendations  Recommendation[]
  reminders        Reminder[]
}

model SemenReport {
  id               Int       @id @default(autoincrement())
  spermCount       Float
  motility         Float
  morphology       Float
  reportDate       DateTime  @default(now())
  userId           Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
}

model Habit {
  id               Int       @id @default(autoincrement())
  sleepDuration    Float?
  diet             String?
  lifestyleChanges String?
  logDate          DateTime  @default(now())
  userId           Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
}

model Article {
  id               Int       @id @default(autoincrement())
  title            String
  summary          String
  content          String
  topic            String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  bookmarks        Bookmark[]
}

model Bookmark {
  id               Int       @id @default(autoincrement())
  userId           Int
  articleId        Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id])
  article          Article   @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
}

model ForumPost {
  id               Int       @id @default(autoincrement())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           Int

  user             User      @relation(fields: [userId], references: [id])
  replies          ForumReply[]
}

model ForumReply {
  id               Int       @id @default(autoincrement())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           Int
  postId           Int

  user             User      @relation(fields: [userId], references: [id])
  post             ForumPost @relation(fields: [postId], references: [id])
}

model Notification {
  id               Int       @id @default(autoincrement())
  message          String
  read             Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           Int

  user             User      @relation(fields: [userId], references: [id])
}

model Recommendation {
  id               Int       @id @default(autoincrement())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           Int

  user             User      @relation(fields: [userId], references: [id])
}

model Reminder {
  id               Int       @id @default(autoincrement())
  message          String
  frequency        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           Int

  user             User      @relation(fields: [userId], references: [id])
}